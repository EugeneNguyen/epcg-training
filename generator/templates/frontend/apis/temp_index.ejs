import {gql} from "@apollo/client";

const ALL = gql`
query <%= modelNameSnake %>_get_all {
  <%= modelNameSnake %>_get_all {
<% for (const field of fieldsArray) { -%>
    <%= field.name %>
<% } -%>
  }
}
`;

const GET_BY_ID = gql`
query <%= modelNameSnake %>_get_by_id($id: String) {
  <%= modelNameSnake %>_get_by_id(id: $id) {
<% for (const field of fieldsArray) { -%>
    <%= field.name %>
<% } -%>
  }
}
`;

<% for (const relationship of relationships) { -%>
  <%   if (relationship.type == "one_to_many") { -%>
const GET_<%= relationship.target.modelNameUpSnake %> = qgl`
query <%= modelNameSnake %>_get_by_id($id: String) {
  <%= modelNameSnake %>_get_by_id(id: $id) {

  }
}
`;
  <%   } -%>
<% } -%>

const ADD = gql`
mutation <%= modelNameSnake %>_add($data: <%= modelNameCapitalCamel %>Input) {
  <%= modelNameSnake %>_add(data: $data) {
<% for (const field of fieldsArray) { -%>
    <%= field.name %>
<% } -%>
  }
}
`;

const EDIT = gql`
mutation <%= modelNameSnake %>_edit($id: String, $data: <%= modelNameCapitalCamel %>Input) {
  <%= modelNameSnake %>_edit(id: $id, data: $data) {
<% for (const field of fieldsArray) { -%>
    <%= field.name %>
<% } -%>
  }
}
`;

const DELETE = gql`
mutation <%= modelNameSnake %>_delete($id: String) {
  <%= modelNameSnake %>_delete(id: $id)
}
`;

const DEFAULT_OPTIONS = {
  notifyOnNetworkStatusChange: true,
  fetchPolicy: "cache-and-network",
}

export default {
  ALL,
  GET_BY_ID,
  ADD,
  EDIT,
  DELETE,
  DEFAULT_OPTIONS,
};
